gplink-1.1.0 #949 (Apr 29 2014)
Copyright (c) 1998-2012 gputils project
Listing File Generated: 6-11-2014  21:51:01
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 3.4.0 #8981 (May 19 2014) (Linux)
                                           ; This file was generated Wed Jun 11 21:51:01 2014
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	radix	dec
                                           	__config 0x300000, 0xf8
                                           	__config 0x300001, 0x38
                                           	__config 0x300002, 0xd9
                                           	__config 0x300003, 0xfe
                                           	__config 0x300005, 0x7d
                                           	__config 0x300006, 0x9a
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global	_putchar
                                           	global	_command
                                           	global	_time
                                           	global	_delay
                                           	global	_uart_init
                                           	global	_getchar
                                           	global	_get_command
                                           	global	_execute
                                           	global	_mult
                                           	global	_atoi
                                           	global	_main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern	__gptrput1
                                           	extern	__gptrget1
                                           	extern	_SPPCFGbits
                                           	extern	_SPPEPSbits
                                           	extern	_SPPCONbits
                                           	extern	_UFRMLbits
                                           	extern	_UFRMHbits
                                           	extern	_UIRbits
                                           	extern	_UIEbits
                                           	extern	_UEIRbits
                                           	extern	_UEIEbits
                                           	extern	_USTATbits
                                           	extern	_UCONbits
                                           	extern	_UADDRbits
                                           	extern	_UCFGbits
                                           	extern	_UEP0bits
                                           	extern	_UEP1bits
                                           	extern	_UEP2bits
                                           	extern	_UEP3bits
                                           	extern	_UEP4bits
                                           	extern	_UEP5bits
                                           	extern	_UEP6bits
                                           	extern	_UEP7bits
                                           	extern	_UEP8bits
                                           	extern	_UEP9bits
                                           	extern	_UEP10bits
                                           	extern	_UEP11bits
                                           	extern	_UEP12bits
                                           	extern	_UEP13bits
                                           	extern	_UEP14bits
                                           	extern	_UEP15bits
                                           	extern	_PORTAbits
                                           	extern	_PORTBbits
                                           	extern	_PORTCbits
                                           	extern	_PORTDbits
                                           	extern	_PORTEbits
                                           	extern	_LATAbits
                                           	extern	_LATBbits
                                           	extern	_LATCbits
                                           	extern	_LATDbits
                                           	extern	_LATEbits
                                           	extern	_DDRAbits
                                           	extern	_TRISAbits
                                           	extern	_DDRBbits
                                           	extern	_TRISBbits
                                           	extern	_DDRCbits
                                           	extern	_TRISCbits
                                           	extern	_DDRDbits
                                           	extern	_TRISDbits
                                           	extern	_DDREbits
                                           	extern	_TRISEbits
                                           	extern	_OSCTUNEbits
                                           	extern	_PIE1bits
                                           	extern	_PIR1bits
                                           	extern	_IPR1bits
                                           	extern	_PIE2bits
                                           	extern	_PIR2bits
                                           	extern	_IPR2bits
                                           	extern	_EECON1bits
                                           	extern	_RCSTAbits
                                           	extern	_TXSTAbits
                                           	extern	_T3CONbits
                                           	extern	_CMCONbits
                                           	extern	_CVRCONbits
                                           	extern	_CCP1ASbits
                                           	extern	_ECCP1ASbits
                                           	extern	_CCP1DELbits
                                           	extern	_ECCP1DELbits
                                           	extern	_BAUDCONbits
                                           	extern	_BAUDCTLbits
                                           	extern	_CCP2CONbits
                                           	extern	_CCP1CONbits
                                           	extern	_ECCP1CONbits
                                           	extern	_ADCON2bits
                                           	extern	_ADCON1bits
                                           	extern	_ADCON0bits
                                           	extern	_SSPCON2bits
                                           	extern	_SSPCON1bits
                                           	extern	_SSPSTATbits
                                           	extern	_T2CONbits
                                           	extern	_T1CONbits
                                           	extern	_RCONbits
                                           	extern	_WDTCONbits
                                           	extern	_HLVDCONbits
                                           	extern	_LVDCONbits
                                           	extern	_OSCCONbits
                                           	extern	_T0CONbits
                                           	extern	_STATUSbits
                                           	extern	_INTCON3bits
                                           	extern	_INTCON2bits
                                           	extern	_INTCONbits
                                           	extern	_STKPTRbits
                                           	extern	_SPPDATA
                                           	extern	_SPPCFG
                                           	extern	_SPPEPS
                                           	extern	_SPPCON
                                           	extern	_UFRM
                                           	extern	_UFRML
                                           	extern	_UFRMH
                                           	extern	_UIR
                                           	extern	_UIE
                                           	extern	_UEIR
                                           	extern	_UEIE
                                           	extern	_USTAT
                                           	extern	_UCON
                                           	extern	_UADDR
                                           	extern	_UCFG
                                           	extern	_UEP0
                                           	extern	_UEP1
                                           	extern	_UEP2
                                           	extern	_UEP3
                                           	extern	_UEP4
                                           	extern	_UEP5
                                           	extern	_UEP6
                                           	extern	_UEP7
                                           	extern	_UEP8
                                           	extern	_UEP9
                                           	extern	_UEP10
                                           	extern	_UEP11
                                           	extern	_UEP12
                                           	extern	_UEP13
                                           	extern	_UEP14
                                           	extern	_UEP15
                                           	extern	_PORTA
                                           	extern	_PORTB
                                           	extern	_PORTC
                                           	extern	_PORTD
                                           	extern	_PORTE
                                           	extern	_LATA
                                           	extern	_LATB
                                           	extern	_LATC
                                           	extern	_LATD
                                           	extern	_LATE
                                           	extern	_DDRA
                                           	extern	_TRISA
                                           	extern	_DDRB
                                           	extern	_TRISB
                                           	extern	_DDRC
                                           	extern	_TRISC
                                           	extern	_DDRD
                                           	extern	_TRISD
                                           	extern	_DDRE
                                           	extern	_TRISE
                                           	extern	_OSCTUNE
                                           	extern	_PIE1
                                           	extern	_PIR1
                                           	extern	_IPR1
                                           	extern	_PIE2
                                           	extern	_PIR2
                                           	extern	_IPR2
                                           	extern	_EECON1
                                           	extern	_EECON2
                                           	extern	_EEDATA
                                           	extern	_EEADR
                                           	extern	_RCSTA
                                           	extern	_TXSTA
                                           	extern	_TXREG
                                           	extern	_RCREG
                                           	extern	_SPBRG
                                           	extern	_SPBRGH
                                           	extern	_T3CON
                                           	extern	_TMR3
                                           	extern	_TMR3L
                                           	extern	_TMR3H
                                           	extern	_CMCON
                                           	extern	_CVRCON
                                           	extern	_CCP1AS
                                           	extern	_ECCP1AS
                                           	extern	_CCP1DEL
                                           	extern	_ECCP1DEL
                                           	extern	_BAUDCON
                                           	extern	_BAUDCTL
                                           	extern	_CCP2CON
                                           	extern	_CCPR2
                                           	extern	_CCPR2L
                                           	extern	_CCPR2H
                                           	extern	_CCP1CON
                                           	extern	_ECCP1CON
                                           	extern	_CCPR1
                                           	extern	_CCPR1L
                                           	extern	_CCPR1H
                                           	extern	_ADCON2
                                           	extern	_ADCON1
                                           	extern	_ADCON0
                                           	extern	_ADRES
                                           	extern	_ADRESL
                                           	extern	_ADRESH
                                           	extern	_SSPCON2
                                           	extern	_SSPCON1
                                           	extern	_SSPSTAT
                                           	extern	_SSPADD
                                           	extern	_SSPBUF
                                           	extern	_T2CON
                                           	extern	_PR2
                                           	extern	_TMR2
                                           	extern	_T1CON
                                           	extern	_TMR1
                                           	extern	_TMR1L
                                           	extern	_TMR1H
                                           	extern	_RCON
                                           	extern	_WDTCON
                                           	extern	_HLVDCON
                                           	extern	_LVDCON
                                           	extern	_OSCCON
                                           	extern	_T0CON
                                           	extern	_TMR0
                                           	extern	_TMR0L
                                           	extern	_TMR0H
                                           	extern	_STATUS
                                           	extern	_FSR2L
                                           	extern	_FSR2H
                                           	extern	_PLUSW2
                                           	extern	_PREINC2
                                           	extern	_POSTDEC2
                                           	extern	_POSTINC2
                                           	extern	_INDF2
                                           	extern	_BSR
                                           	extern	_FSR1L
                                           	extern	_FSR1H
                                           	extern	_PLUSW1
                                           	extern	_PREINC1
                                           	extern	_POSTDEC1
                                           	extern	_POSTINC1
                                           	extern	_INDF1
                                           	extern	_WREG
                                           	extern	_FSR0L
                                           	extern	_FSR0H
                                           	extern	_PLUSW0
                                           	extern	_PREINC0
                                           	extern	_POSTDEC0
                                           	extern	_POSTINC0
                                           	extern	_INDF0
                                           	extern	_INTCON3
                                           	extern	_INTCON2
                                           	extern	_INTCON
                                           	extern	_PROD
                                           	extern	_PRODL
                                           	extern	_PRODH
                                           	extern	_TABLAT
                                           	extern	_TBLPTR
                                           	extern	_TBLPTRL
                                           	extern	_TBLPTRH
                                           	extern	_TBLPTRU
                                           	extern	_PC
                                           	extern	_PCL
                                           	extern	_PCLATH
                                           	extern	_PCLATU
                                           	extern	_STKPTR
                                           	extern	_TOS
                                           	extern	_TOSL
                                           	extern	_TOSH
                                           	extern	_TOSU
                                           
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTINC1	equ	0xfe6
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_code_0	udata
                                           _get_command_com_1_14	res	8
                                           
                                           udata_code_1	udata
                                           _atoi_values_1_24	res	8
                                           
                                           udata_code_2	udata
                                           _command	res	8
                                           
                                           udata_code_3	udata
                                           _time	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_code__main	code
                                           _main:
                                           ;	.line	230; code.c	OSCCONbits.SCS1 = 1;
000708   82d3     bsf     0xd3, 0x1, 0     	BSF	_OSCCONbits, 1
                                           ;	.line	232; code.c	OSCCONbits.IRCF2 = 1;
00070a   8cd3     bsf     0xd3, 0x6, 0     	BSF	_OSCCONbits, 6
                                           ;	.line	233; code.c	OSCCONbits.IRCF1 = 1;
00070c   8ad3     bsf     0xd3, 0x5, 0     	BSF	_OSCCONbits, 5
                                           ;	.line	235; code.c	ADCON1 = 0x0F;
00070e   0e0f     movlw   0xf              	MOVLW	0x0f
000710   6ec1     movwf   0xc1, 0          	MOVWF	_ADCON1
                                           ;	.line	238; code.c	uart_init();
000712   ec6d     call    0xada, 0         	CALL	_uart_init
000714   f005
                                           ;	.line	242; code.c	TRISB = 0;
000716   6a93     clrf    0x93, 0          	CLRF	_TRISB
                                           ;	.line	243; code.c	PORTB = 0;
000718   6a81     clrf    0x81, 0          	CLRF	_PORTB
                                           _00417_DS_:
                                           ;	.line	248; code.c	if( get_command(command) )
00071a   0e00     movlw   0                	MOVLW	HIGH(_command)
00071c   6e01     movwf   0x1, 0           	MOVWF	r0x01
00071e   0e70     movlw   0x70             	MOVLW	LOW(_command)
000720   6e00     movwf   0, 0             	MOVWF	r0x00
000722   0e80     movlw   0x80             	MOVLW	0x80
000724   6e02     movwf   0x2, 0           	MOVWF	r0x02
000726   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000728   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00072a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00072c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00072e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000730   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000732   ecb4     call    0x568, 0         	CALL	_get_command
000734   f002
000736   6e00     movwf   0, 0             	MOVWF	r0x00
000738   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
00073a   f001
00073c   0e03     movlw   0x3              	MOVLW	0x03
00073e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000740   5000     movf    0, 0, 0          	MOVF	r0x00, W
000742   1001     iorwf   0x1, 0, 0        	IORWF	r0x01, W
000744   e0ea     bz      0x71a            	BZ	_00417_DS_
000746   0100     movlb   0                	BANKSEL	(_command + 4)
                                           ;	.line	251; code.c	time[0] = command[4];
000748   5174     movf    0x74, 0, 0x1     	MOVF	(_command + 4), W, B
00074a   0100     movlb   0                	BANKSEL	_time
00074c   6f78     movwf   0x78, 0x1        	MOVWF	_time, B
00074e   0100     movlb   0                	BANKSEL	(_command + 5)
                                           ;	.line	252; code.c	time[1] = command[5];
000750   5175     movf    0x75, 0, 0x1     	MOVF	(_command + 5), W, B
000752   0100     movlb   0                	BANKSEL	(_time + 1)
000754   6f79     movwf   0x79, 0x1        	MOVWF	(_time + 1), B
000756   0100     movlb   0                	BANKSEL	(_command + 6)
                                           ;	.line	253; code.c	time[2] = command[6];
000758   5176     movf    0x76, 0, 0x1     	MOVF	(_command + 6), W, B
00075a   0100     movlb   0                	BANKSEL	(_time + 2)
00075c   6f7a     movwf   0x7a, 0x1        	MOVWF	(_time + 2), B
00075e   0100     movlb   0                	BANKSEL	(_command + 7)
                                           ;	.line	254; code.c	time[3] = command[7];
000760   5177     movf    0x77, 0, 0x1     	MOVF	(_command + 7), W, B
000762   0100     movlb   0                	BANKSEL	(_time + 3)
000764   6f7b     movwf   0x7b, 0x1        	MOVWF	(_time + 3), B
000766   0100     movlb   0                	BANKSEL	_command
                                           ;	.line	256; code.c	if(command[0]=='x' && command[2]=='f')
000768   5170     movf    0x70, 0, 0x1     	MOVF	_command, W, B
00076a   0a78     xorlw   0x78             	XORLW	0x78
00076c   e123     bnz     0x7b4            	BNZ	_00403_DS_
                                           _00452_DS_:
00076e   0100     movlb   0                	BANKSEL	(_command + 2)
000770   5172     movf    0x72, 0, 0x1     	MOVF	(_command + 2), W, B
000772   0a66     xorlw   0x66             	XORLW	0x66
000774   e11f     bnz     0x7b4            	BNZ	_00403_DS_
                                           ;	.line	257; code.c	execute(0x20, atoi(time)); //PIN 38
000776   0e00     movlw   0                	MOVLW	HIGH(_time)
000778   6e01     movwf   0x1, 0           	MOVWF	r0x01
00077a   0e78     movlw   0x78             	MOVLW	LOW(_time)
00077c   6e00     movwf   0, 0             	MOVWF	r0x00
00077e   0e80     movlw   0x80             	MOVLW	0x80
000780   6e02     movwf   0x2, 0           	MOVWF	r0x02
000782   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000784   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000786   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000788   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00078a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00078c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00078e   ec02     call    0x4, 0           	CALL	_atoi
000790   f000
000792   6e00     movwf   0, 0             	MOVWF	r0x00
000794   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
000796   f001
000798   0e03     movlw   0x3              	MOVLW	0x03
00079a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00079c   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00079e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a0   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007a2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a4   0e00     movlw   0                	MOVLW	0x00
0007a6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007a8   0e20     movlw   0x20             	MOVLW	0x20
0007aa   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ac   ec3e     call    0xa7c, 0         	CALL	_execute
0007ae   f005
0007b0   0e04     movlw   0x4              	MOVLW	0x04
0007b2   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00403_DS_:
0007b4   0100     movlb   0                	BANKSEL	_command
                                           ;	.line	258; code.c	if(command[0]=='x' && command[2]=='b')
0007b6   5170     movf    0x70, 0, 0x1     	MOVF	_command, W, B
0007b8   0a78     xorlw   0x78             	XORLW	0x78
0007ba   e123     bnz     0x802            	BNZ	_00406_DS_
                                           _00456_DS_:
0007bc   0100     movlb   0                	BANKSEL	(_command + 2)
0007be   5172     movf    0x72, 0, 0x1     	MOVF	(_command + 2), W, B
0007c0   0a62     xorlw   0x62             	XORLW	0x62
0007c2   e11f     bnz     0x802            	BNZ	_00406_DS_
                                           ;	.line	259; code.c	execute(0x10, atoi(time)); //PIN 37
0007c4   0e00     movlw   0                	MOVLW	HIGH(_time)
0007c6   6e01     movwf   0x1, 0           	MOVWF	r0x01
0007c8   0e78     movlw   0x78             	MOVLW	LOW(_time)
0007ca   6e00     movwf   0, 0             	MOVWF	r0x00
0007cc   0e80     movlw   0x80             	MOVLW	0x80
0007ce   6e02     movwf   0x2, 0           	MOVWF	r0x02
0007d0   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0007d2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007d4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0007d6   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007d8   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007da   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007dc   ec02     call    0x4, 0           	CALL	_atoi
0007de   f000
0007e0   6e00     movwf   0, 0             	MOVWF	r0x00
0007e2   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
0007e4   f001
0007e6   0e03     movlw   0x3              	MOVLW	0x03
0007e8   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0007ea   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0007ec   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007ee   5000     movf    0, 0, 0          	MOVF	r0x00, W
0007f0   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007f2   0e00     movlw   0                	MOVLW	0x00
0007f4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007f6   0e10     movlw   0x10             	MOVLW	0x10
0007f8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0007fa   ec3e     call    0xa7c, 0         	CALL	_execute
0007fc   f005
0007fe   0e04     movlw   0x4              	MOVLW	0x04
000800   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00406_DS_:
000802   0100     movlb   0                	BANKSEL	_command
                                           ;	.line	260; code.c	if(command[0]=='y' && command[2]=='f')
000804   5170     movf    0x70, 0, 0x1     	MOVF	_command, W, B
000806   0a79     xorlw   0x79             	XORLW	0x79
000808   e123     bnz     0x850            	BNZ	_00409_DS_
                                           _00460_DS_:
00080a   0100     movlb   0                	BANKSEL	(_command + 2)
00080c   5172     movf    0x72, 0, 0x1     	MOVF	(_command + 2), W, B
00080e   0a66     xorlw   0x66             	XORLW	0x66
000810   e11f     bnz     0x850            	BNZ	_00409_DS_
                                           ;	.line	261; code.c	execute(0x08, atoi(time)); //PIN 36
000812   0e00     movlw   0                	MOVLW	HIGH(_time)
000814   6e01     movwf   0x1, 0           	MOVWF	r0x01
000816   0e78     movlw   0x78             	MOVLW	LOW(_time)
000818   6e00     movwf   0, 0             	MOVWF	r0x00
00081a   0e80     movlw   0x80             	MOVLW	0x80
00081c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00081e   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000820   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000822   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000824   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000826   5000     movf    0, 0, 0          	MOVF	r0x00, W
000828   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00082a   ec02     call    0x4, 0           	CALL	_atoi
00082c   f000
00082e   6e00     movwf   0, 0             	MOVWF	r0x00
000830   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
000832   f001
000834   0e03     movlw   0x3              	MOVLW	0x03
000836   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000838   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00083a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00083c   5000     movf    0, 0, 0          	MOVF	r0x00, W
00083e   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000840   0e00     movlw   0                	MOVLW	0x00
000842   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000844   0e08     movlw   0x8              	MOVLW	0x08
000846   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000848   ec3e     call    0xa7c, 0         	CALL	_execute
00084a   f005
00084c   0e04     movlw   0x4              	MOVLW	0x04
00084e   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
                                           _00409_DS_:
000850   0100     movlb   0                	BANKSEL	_command
                                           ;	.line	262; code.c	if(command[0]=='y' && command[2]=='b')
000852   5170     movf    0x70, 0, 0x1     	MOVF	_command, W, B
000854   0a79     xorlw   0x79             	XORLW	0x79
000856   e001     bz      0x85a            	BZ	_00464_DS_
000858   d760     bra     0x71a            	BRA	_00417_DS_
                                           _00464_DS_:
00085a   0100     movlb   0                	BANKSEL	(_command + 2)
00085c   5172     movf    0x72, 0, 0x1     	MOVF	(_command + 2), W, B
00085e   0a62     xorlw   0x62             	XORLW	0x62
000860   e001     bz      0x864            	BZ	_00466_DS_
000862   d75b     bra     0x71a            	BRA	_00417_DS_
                                           _00466_DS_:
                                           ;	.line	263; code.c	execute(0x04, atoi(time)); //PIN 35
000864   0e00     movlw   0                	MOVLW	HIGH(_time)
000866   6e01     movwf   0x1, 0           	MOVWF	r0x01
000868   0e78     movlw   0x78             	MOVLW	LOW(_time)
00086a   6e00     movwf   0, 0             	MOVWF	r0x00
00086c   0e80     movlw   0x80             	MOVLW	0x80
00086e   6e02     movwf   0x2, 0           	MOVWF	r0x02
000870   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000872   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000874   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000876   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000878   5000     movf    0, 0, 0          	MOVF	r0x00, W
00087a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00087c   ec02     call    0x4, 0           	CALL	_atoi
00087e   f000
000880   6e00     movwf   0, 0             	MOVWF	r0x00
000882   cff3     movff   0xff3, 0x1       	MOVFF	PRODL, r0x01
000884   f001
000886   0e03     movlw   0x3              	MOVLW	0x03
000888   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00088a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00088c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00088e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000890   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000892   0e00     movlw   0                	MOVLW	0x00
000894   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000896   0e04     movlw   0x4              	MOVLW	0x04
000898   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00089a   ec3e     call    0xa7c, 0         	CALL	_execute
00089c   f005
00089e   0e04     movlw   0x4              	MOVLW	0x04
0008a0   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0008a2   d73b     bra     0x71a            	BRA	_00417_DS_
0008a4   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__atoi	code
                                           _atoi:
                                           ;	.line	177; code.c	unsigned int atoi(char* string)
000004   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000006   ffe5
000008   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00000a   ffd9
00000c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
00000e   ffe5
000010   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000012   ffe5
000014   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000016   ffe5
000018   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00001a   ffe5
00001c   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
00001e   ffe5
000020   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000022   ffe5
000024   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000026   ffe5
000028   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00002a   ffe5
00002c   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
00002e   ffe5
000030   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000032   ffe5
000034   c00a     movff   0xa, 0xfe5       	MOVFF	r0x0a, POSTDEC1
000036   ffe5
000038   c00b     movff   0xb, 0xfe5       	MOVFF	r0x0b, POSTDEC1
00003a   ffe5
00003c   c00c     movff   0xc, 0xfe5       	MOVFF	r0x0c, POSTDEC1
00003e   ffe5
000040   c00d     movff   0xd, 0xfe5       	MOVFF	r0x0d, POSTDEC1
000042   ffe5
000044   c00e     movff   0xe, 0xfe5       	MOVFF	r0x0e, POSTDEC1
000046   ffe5
000048   c00f     movff   0xf, 0xfe5       	MOVFF	r0x0f, POSTDEC1
00004a   ffe5
00004c   c010     movff   0x10, 0xfe5      	MOVFF	r0x10, POSTDEC1
00004e   ffe5
000050   c011     movff   0x11, 0xfe5      	MOVFF	r0x11, POSTDEC1
000052   ffe5
000054   c012     movff   0x12, 0xfe5      	MOVFF	r0x12, POSTDEC1
000056   ffe5
000058   c013     movff   0x13, 0xfe5      	MOVFF	r0x13, POSTDEC1
00005a   ffe5
00005c   c014     movff   0x14, 0xfe5      	MOVFF	r0x14, POSTDEC1
00005e   ffe5
000060   c015     movff   0x15, 0xfe5      	MOVFF	r0x15, POSTDEC1
000062   ffe5
000064   c016     movff   0x16, 0xfe5      	MOVFF	r0x16, POSTDEC1
000066   ffe5
000068   c017     movff   0x17, 0xfe5      	MOVFF	r0x17, POSTDEC1
00006a   ffe5
00006c   c018     movff   0x18, 0xfe5      	MOVFF	r0x18, POSTDEC1
00006e   ffe5
000070   c019     movff   0x19, 0xfe5      	MOVFF	r0x19, POSTDEC1
000072   ffe5
000074   c01a     movff   0x1a, 0xfe5      	MOVFF	r0x1a, POSTDEC1
000076   ffe5
000078   c01b     movff   0x1b, 0xfe5      	MOVFF	r0x1b, POSTDEC1
00007a   ffe5
00007c   c01c     movff   0x1c, 0xfe5      	MOVFF	r0x1c, POSTDEC1
00007e   ffe5
000080   c01d     movff   0x1d, 0xfe5      	MOVFF	r0x1d, POSTDEC1
000082   ffe5
000084   0e02     movlw   0x2              	MOVLW	0x02
000086   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000088   f000
00008a   0e03     movlw   0x3              	MOVLW	0x03
00008c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
00008e   f001
000090   0e04     movlw   0x4              	MOVLW	0x04
000092   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000094   f002
                                           ;	.line	180; code.c	unsigned int integer=0;
000096   6a03     clrf    0x3, 0           	CLRF	r0x03
000098   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           ;	.line	183; code.c	for(i=0;i<4;i++)
00009a   6a05     clrf    0x5, 0           	CLRF	r0x05
00009c   6a06     clrf    0x6, 0           	CLRF	r0x06
00009e   6a07     clrf    0x7, 0           	CLRF	r0x07
0000a0   6a08     clrf    0x8, 0           	CLRF	r0x08
0000a2   6a09     clrf    0x9, 0           	CLRF	r0x09
0000a4   6a0a     clrf    0xa, 0           	CLRF	r0x0a
0000a6   6a0b     clrf    0xb, 0           	CLRF	r0x0b
0000a8   6a0c     clrf    0xc, 0           	CLRF	r0x0c
0000aa   6a0d     clrf    0xd, 0           	CLRF	r0x0d
0000ac   6a0e     clrf    0xe, 0           	CLRF	r0x0e
0000ae   6a0f     clrf    0xf, 0           	CLRF	r0x0f
0000b0   6a10     clrf    0x10, 0          	CLRF	r0x10
0000b2   6a11     clrf    0x11, 0          	CLRF	r0x11
0000b4   6a12     clrf    0x12, 0          	CLRF	r0x12
0000b6   6a13     clrf    0x13, 0          	CLRF	r0x13
0000b8   6a14     clrf    0x14, 0          	CLRF	r0x14
0000ba   6a15     clrf    0x15, 0          	CLRF	r0x15
0000bc   6a16     clrf    0x16, 0          	CLRF	r0x16
0000be   6a17     clrf    0x17, 0          	CLRF	r0x17
0000c0   6a18     clrf    0x18, 0          	CLRF	r0x18
0000c2   6a19     clrf    0x19, 0          	CLRF	r0x19
0000c4   6a1a     clrf    0x1a, 0          	CLRF	r0x1a
                                           _00308_DS_:
                                           ;	.line	185; code.c	if( string[i] == '0' )
0000c6   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0000c8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0000ca   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0000cc   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0000ce   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
0000d0   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0000d2   6ae8     clrf    0xe8, 0          	CLRF	WREG
0000d4   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
0000d6   68e8     setf    0xe8, 0          	SETF	WREG
0000d8   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0000da   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
0000dc   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0000de   ffe9
0000e0   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
0000e2   fff3
0000e4   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
0000e6   ec94     call    0xb28, 0         	CALL	__gptrget1
0000e8   f005
0000ea   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0000ec   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
0000ee   0a30     xorlw   0x30             	XORLW	0x30
0000f0   e10e     bnz     0x10e            	BNZ	_00279_DS_
                                           ;	.line	186; code.c	values[i] = 0;
0000f2   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
0000f4   2407     addwf   0x7, 0, 0        	ADDWF	r0x07, W
0000f6   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0000f8   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
0000fa   2008     addwfc  0x8, 0, 0        	ADDWFC	r0x08, W
0000fc   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0000fe   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000100   ffe9
000102   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
000104   ffea
000106   0e00     movlw   0                	MOVLW	0x00
000108   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
00010a   0e00     movlw   0                	MOVLW	0x00
00010c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00279_DS_:
                                           ;	.line	187; code.c	if( string[i] == '1' )
00010e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000110   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000112   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000114   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000116   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000118   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00011a   6ae8     clrf    0xe8, 0          	CLRF	WREG
00011c   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
00011e   68e8     setf    0xe8, 0          	SETF	WREG
000120   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000122   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
000124   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000126   ffe9
000128   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
00012a   fff3
00012c   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
00012e   ec94     call    0xb28, 0         	CALL	__gptrget1
000130   f005
000132   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000134   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
000136   0a31     xorlw   0x31             	XORLW	0x31
000138   e10e     bnz     0x156            	BNZ	_00281_DS_
                                           ;	.line	188; code.c	values[i] = 1;
00013a   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
00013c   2409     addwf   0x9, 0, 0        	ADDWF	r0x09, W
00013e   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000140   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
000142   200a     addwfc  0xa, 0, 0        	ADDWFC	r0x0a, W
000144   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000146   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000148   ffe9
00014a   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
00014c   ffea
00014e   0e01     movlw   0x1              	MOVLW	0x01
000150   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
000152   0e00     movlw   0                	MOVLW	0x00
000154   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00281_DS_:
                                           ;	.line	189; code.c	if( string[i] == '2' )
000156   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000158   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00015a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00015c   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00015e   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000160   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000162   6ae8     clrf    0xe8, 0          	CLRF	WREG
000164   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
000166   68e8     setf    0xe8, 0          	SETF	WREG
000168   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00016a   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
00016c   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
00016e   ffe9
000170   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
000172   fff3
000174   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
000176   ec94     call    0xb28, 0         	CALL	__gptrget1
000178   f005
00017a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00017c   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
00017e   0a32     xorlw   0x32             	XORLW	0x32
000180   e10e     bnz     0x19e            	BNZ	_00283_DS_
                                           ;	.line	190; code.c	values[i] = 2;
000182   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
000184   240b     addwf   0xb, 0, 0        	ADDWF	r0x0b, W
000186   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000188   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
00018a   200c     addwfc  0xc, 0, 0        	ADDWFC	r0x0c, W
00018c   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00018e   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000190   ffe9
000192   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
000194   ffea
000196   0e02     movlw   0x2              	MOVLW	0x02
000198   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
00019a   0e00     movlw   0                	MOVLW	0x00
00019c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00283_DS_:
                                           ;	.line	191; code.c	if( string[i] == '3' )
00019e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0001a0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0001a2   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0001a4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0001a6   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
0001a8   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0001aa   6ae8     clrf    0xe8, 0          	CLRF	WREG
0001ac   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
0001ae   68e8     setf    0xe8, 0          	SETF	WREG
0001b0   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0001b2   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
0001b4   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0001b6   ffe9
0001b8   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
0001ba   fff3
0001bc   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
0001be   ec94     call    0xb28, 0         	CALL	__gptrget1
0001c0   f005
0001c2   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0001c4   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
0001c6   0a33     xorlw   0x33             	XORLW	0x33
0001c8   e10e     bnz     0x1e6            	BNZ	_00285_DS_
                                           ;	.line	192; code.c	values[i] = 3;
0001ca   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
0001cc   240d     addwf   0xd, 0, 0        	ADDWF	r0x0d, W
0001ce   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0001d0   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
0001d2   200e     addwfc  0xe, 0, 0        	ADDWFC	r0x0e, W
0001d4   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0001d6   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0001d8   ffe9
0001da   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
0001dc   ffea
0001de   0e03     movlw   0x3              	MOVLW	0x03
0001e0   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
0001e2   0e00     movlw   0                	MOVLW	0x00
0001e4   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00285_DS_:
                                           ;	.line	193; code.c	if( string[i] == '4' )
0001e6   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0001e8   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0001ea   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0001ec   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0001ee   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
0001f0   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0001f2   6ae8     clrf    0xe8, 0          	CLRF	WREG
0001f4   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
0001f6   68e8     setf    0xe8, 0          	SETF	WREG
0001f8   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0001fa   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
0001fc   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0001fe   ffe9
000200   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
000202   fff3
000204   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
000206   ec94     call    0xb28, 0         	CALL	__gptrget1
000208   f005
00020a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00020c   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
00020e   0a34     xorlw   0x34             	XORLW	0x34
000210   e10e     bnz     0x22e            	BNZ	_00287_DS_
                                           ;	.line	194; code.c	values[i] = 4;
000212   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
000214   240f     addwf   0xf, 0, 0        	ADDWF	r0x0f, W
000216   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000218   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
00021a   2010     addwfc  0x10, 0, 0       	ADDWFC	r0x10, W
00021c   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00021e   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000220   ffe9
000222   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
000224   ffea
000226   0e04     movlw   0x4              	MOVLW	0x04
000228   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
00022a   0e00     movlw   0                	MOVLW	0x00
00022c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00287_DS_:
                                           ;	.line	195; code.c	if( string[i] == '5' )
00022e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000230   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000232   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000234   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000236   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000238   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00023a   6ae8     clrf    0xe8, 0          	CLRF	WREG
00023c   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
00023e   68e8     setf    0xe8, 0          	SETF	WREG
000240   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000242   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
000244   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000246   ffe9
000248   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
00024a   fff3
00024c   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
00024e   ec94     call    0xb28, 0         	CALL	__gptrget1
000250   f005
000252   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000254   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
000256   0a35     xorlw   0x35             	XORLW	0x35
000258   e10e     bnz     0x276            	BNZ	_00289_DS_
                                           ;	.line	196; code.c	values[i] = 5;
00025a   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
00025c   2411     addwf   0x11, 0, 0       	ADDWF	r0x11, W
00025e   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000260   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
000262   2012     addwfc  0x12, 0, 0       	ADDWFC	r0x12, W
000264   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000266   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000268   ffe9
00026a   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
00026c   ffea
00026e   0e05     movlw   0x5              	MOVLW	0x05
000270   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
000272   0e00     movlw   0                	MOVLW	0x00
000274   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00289_DS_:
                                           ;	.line	197; code.c	if( string[i] == '6' )
000276   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000278   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00027a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00027c   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00027e   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000280   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000282   6ae8     clrf    0xe8, 0          	CLRF	WREG
000284   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
000286   68e8     setf    0xe8, 0          	SETF	WREG
000288   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00028a   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
00028c   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
00028e   ffe9
000290   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
000292   fff3
000294   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
000296   ec94     call    0xb28, 0         	CALL	__gptrget1
000298   f005
00029a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00029c   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
00029e   0a36     xorlw   0x36             	XORLW	0x36
0002a0   e10e     bnz     0x2be            	BNZ	_00291_DS_
                                           ;	.line	198; code.c	values[i] = 6;
0002a2   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
0002a4   2413     addwf   0x13, 0, 0       	ADDWF	r0x13, W
0002a6   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0002a8   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
0002aa   2014     addwfc  0x14, 0, 0       	ADDWFC	r0x14, W
0002ac   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0002ae   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0002b0   ffe9
0002b2   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
0002b4   ffea
0002b6   0e06     movlw   0x6              	MOVLW	0x06
0002b8   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
0002ba   0e00     movlw   0                	MOVLW	0x00
0002bc   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00291_DS_:
                                           ;	.line	199; code.c	if( string[i] == '7' )
0002be   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0002c0   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
0002c2   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0002c4   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0002c6   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
0002c8   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0002ca   6ae8     clrf    0xe8, 0          	CLRF	WREG
0002cc   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
0002ce   68e8     setf    0xe8, 0          	SETF	WREG
0002d0   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
0002d2   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
0002d4   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0002d6   ffe9
0002d8   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
0002da   fff3
0002dc   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
0002de   ec94     call    0xb28, 0         	CALL	__gptrget1
0002e0   f005
0002e2   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0002e4   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
0002e6   0a37     xorlw   0x37             	XORLW	0x37
0002e8   e10e     bnz     0x306            	BNZ	_00293_DS_
                                           ;	.line	200; code.c	values[i] = 7;
0002ea   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
0002ec   2415     addwf   0x15, 0, 0       	ADDWF	r0x15, W
0002ee   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
0002f0   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
0002f2   2016     addwfc  0x16, 0, 0       	ADDWFC	r0x16, W
0002f4   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
0002f6   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
0002f8   ffe9
0002fa   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
0002fc   ffea
0002fe   0e07     movlw   0x7              	MOVLW	0x07
000300   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
000302   0e00     movlw   0                	MOVLW	0x00
000304   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00293_DS_:
                                           ;	.line	201; code.c	if( string[i] == '8' )
000306   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000308   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
00030a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00030c   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
00030e   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000310   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000312   6ae8     clrf    0xe8, 0          	CLRF	WREG
000314   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
000316   68e8     setf    0xe8, 0          	SETF	WREG
000318   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
00031a   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
00031c   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
00031e   ffe9
000320   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
000322   fff3
000324   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
000326   ec94     call    0xb28, 0         	CALL	__gptrget1
000328   f005
00032a   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
00032c   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
00032e   0a38     xorlw   0x38             	XORLW	0x38
000330   e10e     bnz     0x34e            	BNZ	_00295_DS_
                                           ;	.line	202; code.c	values[i] = 8;
000332   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
000334   2417     addwf   0x17, 0, 0       	ADDWF	r0x17, W
000336   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000338   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
00033a   2018     addwfc  0x18, 0, 0       	ADDWFC	r0x18, W
00033c   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00033e   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000340   ffe9
000342   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
000344   ffea
000346   0e08     movlw   0x8              	MOVLW	0x08
000348   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
00034a   0e00     movlw   0                	MOVLW	0x00
00034c   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00295_DS_:
                                           ;	.line	203; code.c	if( string[i] == '9' )
00034e   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000350   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000352   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000354   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
000356   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000358   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
00035a   6ae8     clrf    0xe8, 0          	CLRF	WREG
00035c   be06     btfsc   0x6, 0x7, 0      	BTFSC	r0x06, 7
00035e   68e8     setf    0xe8, 0          	SETF	WREG
000360   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000362   6e1d     movwf   0x1d, 0          	MOVWF	r0x1d
000364   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000366   ffe9
000368   c01c     movff   0x1c, 0xff3      	MOVFF	r0x1c, PRODL
00036a   fff3
00036c   501d     movf    0x1d, 0, 0       	MOVF	r0x1d, W
00036e   ec94     call    0xb28, 0         	CALL	__gptrget1
000370   f005
000372   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000374   501b     movf    0x1b, 0, 0       	MOVF	r0x1b, W
000376   0a39     xorlw   0x39             	XORLW	0x39
000378   e10e     bnz     0x396            	BNZ	_00309_DS_
                                           ;	.line	204; code.c	values[i] = 9;
00037a   0e68     movlw   0x68             	MOVLW	LOW(_atoi_values_1_24)
00037c   2419     addwf   0x19, 0, 0       	ADDWF	r0x19, W
00037e   6e1b     movwf   0x1b, 0          	MOVWF	r0x1b
000380   0e00     movlw   0                	MOVLW	HIGH(_atoi_values_1_24)
000382   201a     addwfc  0x1a, 0, 0       	ADDWFC	r0x1a, W
000384   6e1c     movwf   0x1c, 0          	MOVWF	r0x1c
000386   c01b     movff   0x1b, 0xfe9      	MOVFF	r0x1b, FSR0L
000388   ffe9
00038a   c01c     movff   0x1c, 0xfea      	MOVFF	r0x1c, FSR0H
00038c   ffea
00038e   0e09     movlw   0x9              	MOVLW	0x09
000390   6eee     movwf   0xee, 0          	MOVWF	POSTINC0
000392   0e00     movlw   0                	MOVLW	0x00
000394   6eef     movwf   0xef, 0          	MOVWF	INDF0
                                           _00309_DS_:
                                           ;	.line	183; code.c	for(i=0;i<4;i++)
000396   0e02     movlw   0x2              	MOVLW	0x02
000398   2607     addwf   0x7, 0x1, 0      	ADDWF	r0x07, F
00039a   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00039c   2a08     incf    0x8, 0x1, 0      	INCF	r0x08, F
00039e   0e02     movlw   0x2              	MOVLW	0x02
0003a0   2609     addwf   0x9, 0x1, 0      	ADDWF	r0x09, F
0003a2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003a4   2a0a     incf    0xa, 0x1, 0      	INCF	r0x0a, F
0003a6   0e02     movlw   0x2              	MOVLW	0x02
0003a8   260b     addwf   0xb, 0x1, 0      	ADDWF	r0x0b, F
0003aa   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003ac   2a0c     incf    0xc, 0x1, 0      	INCF	r0x0c, F
0003ae   0e02     movlw   0x2              	MOVLW	0x02
0003b0   260d     addwf   0xd, 0x1, 0      	ADDWF	r0x0d, F
0003b2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003b4   2a0e     incf    0xe, 0x1, 0      	INCF	r0x0e, F
0003b6   0e02     movlw   0x2              	MOVLW	0x02
0003b8   260f     addwf   0xf, 0x1, 0      	ADDWF	r0x0f, F
0003ba   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003bc   2a10     incf    0x10, 0x1, 0     	INCF	r0x10, F
0003be   0e02     movlw   0x2              	MOVLW	0x02
0003c0   2611     addwf   0x11, 0x1, 0     	ADDWF	r0x11, F
0003c2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003c4   2a12     incf    0x12, 0x1, 0     	INCF	r0x12, F
0003c6   0e02     movlw   0x2              	MOVLW	0x02
0003c8   2613     addwf   0x13, 0x1, 0     	ADDWF	r0x13, F
0003ca   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003cc   2a14     incf    0x14, 0x1, 0     	INCF	r0x14, F
0003ce   0e02     movlw   0x2              	MOVLW	0x02
0003d0   2615     addwf   0x15, 0x1, 0     	ADDWF	r0x15, F
0003d2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003d4   2a16     incf    0x16, 0x1, 0     	INCF	r0x16, F
0003d6   0e02     movlw   0x2              	MOVLW	0x02
0003d8   2617     addwf   0x17, 0x1, 0     	ADDWF	r0x17, F
0003da   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003dc   2a18     incf    0x18, 0x1, 0     	INCF	r0x18, F
0003de   0e02     movlw   0x2              	MOVLW	0x02
0003e0   2619     addwf   0x19, 0x1, 0     	ADDWF	r0x19, F
0003e2   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
0003e4   2a1a     incf    0x1a, 0x1, 0     	INCF	r0x1a, F
0003e6   4a05     infsnz  0x5, 0x1, 0      	INFSNZ	r0x05, F
0003e8   2a06     incf    0x6, 0x1, 0      	INCF	r0x06, F
0003ea   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0003ec   0f80     addlw   0x80             	ADDLW	0x80
0003ee   0f80     addlw   0x80             	ADDLW	0x80
0003f0   e102     bnz     0x3f6            	BNZ	_00390_DS_
0003f2   0e04     movlw   0x4              	MOVLW	0x04
0003f4   5c05     subwf   0x5, 0, 0        	SUBWF	r0x05, W
                                           _00390_DS_:
0003f6   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0003f8   d666     bra     0xc6             	BRA	_00308_DS_
                                           ;	.line	207; code.c	for(i=0;i<4;i++)
0003fa   6a00     clrf    0, 0             	CLRF	r0x00
0003fc   6a01     clrf    0x1, 0           	CLRF	r0x01
                                           _00310_DS_:
                                           ;	.line	209; code.c	if(i==0)
0003fe   5000     movf    0, 0, 0          	MOVF	r0x00, W
000400   1001     iorwf   0x1, 0, 0        	IORWF	r0x01, W
000402   e115     bnz     0x42e            	BNZ	_00300_DS_
                                           ;	.line	210; code.c	integer += mult(values[0], 1000);
000404   0e03     movlw   0x3              	MOVLW	0x03
000406   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000408   0ee8     movlw   0xe8             	MOVLW	0xe8
00040a   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00040c   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 1)
00040e   5169     movf    0x69, 0, 0x1     	MOVF	(_atoi_values_1_24 + 1), W, B
000410   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000412   0100     movlb   0                	BANKSEL	_atoi_values_1_24
000414   5168     movf    0x68, 0, 0x1     	MOVF	_atoi_values_1_24, W, B
000416   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000418   ec53     call    0x8a6, 0         	CALL	_mult
00041a   f004
00041c   6e02     movwf   0x2, 0           	MOVWF	r0x02
00041e   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
000420   f005
000422   0e04     movlw   0x4              	MOVLW	0x04
000424   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000426   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000428   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
00042a   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
00042c   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
                                           _00300_DS_:
                                           ;	.line	211; code.c	if(i==1)
00042e   5000     movf    0, 0, 0          	MOVF	r0x00, W
000430   0a01     xorlw   0x1              	XORLW	0x01
000432   e102     bnz     0x438            	BNZ	_00391_DS_
000434   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000436   e001     bz      0x43a            	BZ	_00392_DS_
                                           _00391_DS_:
000438   d015     bra     0x464            	BRA	_00302_DS_
                                           _00392_DS_:
                                           ;	.line	212; code.c	integer += mult(values[1], 100);
00043a   0e00     movlw   0                	MOVLW	0x00
00043c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00043e   0e64     movlw   0x64             	MOVLW	0x64
000440   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000442   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 3)
000444   516b     movf    0x6b, 0, 0x1     	MOVF	(_atoi_values_1_24 + 3), W, B
000446   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000448   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 2)
00044a   516a     movf    0x6a, 0, 0x1     	MOVF	(_atoi_values_1_24 + 2), W, B
00044c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00044e   ec53     call    0x8a6, 0         	CALL	_mult
000450   f004
000452   6e02     movwf   0x2, 0           	MOVWF	r0x02
000454   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
000456   f005
000458   0e04     movlw   0x4              	MOVLW	0x04
00045a   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
00045c   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00045e   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
000460   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000462   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
                                           _00302_DS_:
                                           ;	.line	213; code.c	if(i==2)
000464   5000     movf    0, 0, 0          	MOVF	r0x00, W
000466   0a02     xorlw   0x2              	XORLW	0x02
000468   e102     bnz     0x46e            	BNZ	_00393_DS_
00046a   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
00046c   e001     bz      0x470            	BZ	_00394_DS_
                                           _00393_DS_:
00046e   d015     bra     0x49a            	BRA	_00304_DS_
                                           _00394_DS_:
                                           ;	.line	214; code.c	integer += mult(values[2], 10);
000470   0e00     movlw   0                	MOVLW	0x00
000472   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000474   0e0a     movlw   0xa              	MOVLW	0x0a
000476   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000478   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 5)
00047a   516d     movf    0x6d, 0, 0x1     	MOVF	(_atoi_values_1_24 + 5), W, B
00047c   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
00047e   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 4)
000480   516c     movf    0x6c, 0, 0x1     	MOVF	(_atoi_values_1_24 + 4), W, B
000482   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000484   ec53     call    0x8a6, 0         	CALL	_mult
000486   f004
000488   6e02     movwf   0x2, 0           	MOVWF	r0x02
00048a   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
00048c   f005
00048e   0e04     movlw   0x4              	MOVLW	0x04
000490   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
000492   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000494   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
000496   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
000498   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
                                           _00304_DS_:
                                           ;	.line	215; code.c	if(i==3)
00049a   5000     movf    0, 0, 0          	MOVF	r0x00, W
00049c   0a03     xorlw   0x3              	XORLW	0x03
00049e   e102     bnz     0x4a4            	BNZ	_00395_DS_
0004a0   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004a2   e001     bz      0x4a6            	BZ	_00396_DS_
                                           _00395_DS_:
0004a4   d015     bra     0x4d0            	BRA	_00311_DS_
                                           _00396_DS_:
                                           ;	.line	216; code.c	integer += mult(values[3], 1);
0004a6   0e00     movlw   0                	MOVLW	0x00
0004a8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004aa   0e01     movlw   0x1              	MOVLW	0x01
0004ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004ae   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 7)
0004b0   516f     movf    0x6f, 0, 0x1     	MOVF	(_atoi_values_1_24 + 7), W, B
0004b2   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004b4   0100     movlb   0                	BANKSEL	(_atoi_values_1_24 + 6)
0004b6   516e     movf    0x6e, 0, 0x1     	MOVF	(_atoi_values_1_24 + 6), W, B
0004b8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0004ba   ec53     call    0x8a6, 0         	CALL	_mult
0004bc   f004
0004be   6e02     movwf   0x2, 0           	MOVWF	r0x02
0004c0   cff3     movff   0xff3, 0x5       	MOVFF	PRODL, r0x05
0004c2   f005
0004c4   0e04     movlw   0x4              	MOVLW	0x04
0004c6   26e1     addwf   0xe1, 0x1, 0     	ADDWF	FSR1L, F
0004c8   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
0004ca   2603     addwf   0x3, 0x1, 0      	ADDWF	r0x03, F
0004cc   5005     movf    0x5, 0, 0        	MOVF	r0x05, W
0004ce   2204     addwfc  0x4, 0x1, 0      	ADDWFC	r0x04, F
                                           _00311_DS_:
                                           ;	.line	207; code.c	for(i=0;i<4;i++)
0004d0   4a00     infsnz  0, 0x1, 0        	INFSNZ	r0x00, F
0004d2   2a01     incf    0x1, 0x1, 0      	INCF	r0x01, F
0004d4   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
0004d6   0f80     addlw   0x80             	ADDLW	0x80
0004d8   0f80     addlw   0x80             	ADDLW	0x80
0004da   e102     bnz     0x4e0            	BNZ	_00397_DS_
0004dc   0e04     movlw   0x4              	MOVLW	0x04
0004de   5c00     subwf   0, 0, 0          	SUBWF	r0x00, W
                                           _00397_DS_:
0004e0   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
0004e2   d78d     bra     0x3fe            	BRA	_00310_DS_
                                           ;	.line	219; code.c	return integer;
0004e4   c004     movff   0x4, 0xff3       	MOVFF	r0x04, PRODL
0004e6   fff3
0004e8   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0004ea   cfe4     movff   0xfe4, 0x1d      	MOVFF	PREINC1, r0x1d
0004ec   f01d
0004ee   cfe4     movff   0xfe4, 0x1c      	MOVFF	PREINC1, r0x1c
0004f0   f01c
0004f2   cfe4     movff   0xfe4, 0x1b      	MOVFF	PREINC1, r0x1b
0004f4   f01b
0004f6   cfe4     movff   0xfe4, 0x1a      	MOVFF	PREINC1, r0x1a
0004f8   f01a
0004fa   cfe4     movff   0xfe4, 0x19      	MOVFF	PREINC1, r0x19
0004fc   f019
0004fe   cfe4     movff   0xfe4, 0x18      	MOVFF	PREINC1, r0x18
000500   f018
000502   cfe4     movff   0xfe4, 0x17      	MOVFF	PREINC1, r0x17
000504   f017
000506   cfe4     movff   0xfe4, 0x16      	MOVFF	PREINC1, r0x16
000508   f016
00050a   cfe4     movff   0xfe4, 0x15      	MOVFF	PREINC1, r0x15
00050c   f015
00050e   cfe4     movff   0xfe4, 0x14      	MOVFF	PREINC1, r0x14
000510   f014
000512   cfe4     movff   0xfe4, 0x13      	MOVFF	PREINC1, r0x13
000514   f013
000516   cfe4     movff   0xfe4, 0x12      	MOVFF	PREINC1, r0x12
000518   f012
00051a   cfe4     movff   0xfe4, 0x11      	MOVFF	PREINC1, r0x11
00051c   f011
00051e   cfe4     movff   0xfe4, 0x10      	MOVFF	PREINC1, r0x10
000520   f010
000522   cfe4     movff   0xfe4, 0xf       	MOVFF	PREINC1, r0x0f
000524   f00f
000526   cfe4     movff   0xfe4, 0xe       	MOVFF	PREINC1, r0x0e
000528   f00e
00052a   cfe4     movff   0xfe4, 0xd       	MOVFF	PREINC1, r0x0d
00052c   f00d
00052e   cfe4     movff   0xfe4, 0xc       	MOVFF	PREINC1, r0x0c
000530   f00c
000532   cfe4     movff   0xfe4, 0xb       	MOVFF	PREINC1, r0x0b
000534   f00b
000536   cfe4     movff   0xfe4, 0xa       	MOVFF	PREINC1, r0x0a
000538   f00a
00053a   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
00053c   f009
00053e   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000540   f008
000542   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000544   f007
000546   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000548   f006
00054a   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
00054c   f005
00054e   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000550   f004
000552   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000554   f003
000556   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000558   f002
00055a   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
00055c   f001
00055e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000560   f000
000562   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000564   ffd9
000566   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__mult	code
                                           _mult:
                                           ;	.line	163; code.c	unsigned int mult(unsigned int a, unsigned int b)
0008a6   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0008a8   ffe5
0008aa   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0008ac   ffd9
0008ae   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0008b0   ffe5
0008b2   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0008b4   ffe5
0008b6   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0008b8   ffe5
0008ba   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
0008bc   ffe5
0008be   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
0008c0   ffe5
0008c2   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
0008c4   ffe5
0008c6   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
0008c8   ffe5
0008ca   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
0008cc   ffe5
0008ce   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0008d0   ffe5
0008d2   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
0008d4   ffe5
0008d6   0e02     movlw   0x2              	MOVLW	0x02
0008d8   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
0008da   f000
0008dc   0e03     movlw   0x3              	MOVLW	0x03
0008de   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0008e0   f001
0008e2   0e04     movlw   0x4              	MOVLW	0x04
0008e4   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0008e6   f002
0008e8   0e05     movlw   0x5              	MOVLW	0x05
0008ea   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
0008ec   f003
                                           ;	.line	165; code.c	unsigned int result=0;
0008ee   6a04     clrf    0x4, 0           	CLRF	r0x04
0008f0   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           ;	.line	168; code.c	for(i=0;i<a;i++)
0008f2   6a06     clrf    0x6, 0           	CLRF	r0x06
0008f4   6a07     clrf    0x7, 0           	CLRF	r0x07
                                           _00262_DS_:
0008f6   5006     movf    0x6, 0, 0        	MOVF	r0x06, W
0008f8   6e08     movwf   0x8, 0           	MOVWF	r0x08
0008fa   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0008fc   6e09     movwf   0x9, 0           	MOVWF	r0x09
0008fe   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000900   5c09     subwf   0x9, 0, 0        	SUBWF	r0x09, W
000902   e102     bnz     0x908            	BNZ	_00273_DS_
000904   5000     movf    0, 0, 0          	MOVF	r0x00, W
000906   5c08     subwf   0x8, 0, 0        	SUBWF	r0x08, W
                                           _00273_DS_:
000908   e207     bc      0x918            	BC	_00260_DS_
                                           ;	.line	170; code.c	result += b;
00090a   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
00090c   2604     addwf   0x4, 0x1, 0      	ADDWF	r0x04, F
00090e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000910   2205     addwfc  0x5, 0x1, 0      	ADDWFC	r0x05, F
                                           ;	.line	168; code.c	for(i=0;i<a;i++)
000912   4a06     infsnz  0x6, 0x1, 0      	INFSNZ	r0x06, F
000914   2a07     incf    0x7, 0x1, 0      	INCF	r0x07, F
000916   d7ef     bra     0x8f6            	BRA	_00262_DS_
                                           _00260_DS_:
                                           ;	.line	173; code.c	return result;
000918   c005     movff   0x5, 0xff3       	MOVFF	r0x05, PRODL
00091a   fff3
00091c   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
00091e   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
000920   f009
000922   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
000924   f008
000926   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000928   f007
00092a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
00092c   f006
00092e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000930   f005
000932   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000934   f004
000936   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000938   f003
00093a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
00093c   f002
00093e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000940   f001
000942   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000944   f000
000946   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000948   ffd9
00094a   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__execute	code
                                           _execute:
                                           ;	.line	154; code.c	void execute(unsigned int portb, unsigned int time_)
000a7c   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000a7e   ffe5
000a80   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000a82   ffd9
000a84   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000a86   ffe5
000a88   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000a8a   ffe5
000a8c   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
000a8e   ffe5
000a90   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000a92   ffe5
000a94   0e02     movlw   0x2              	MOVLW	0x02
000a96   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000a98   f000
000a9a   0e03     movlw   0x3              	MOVLW	0x03
000a9c   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000a9e   f001
000aa0   0e04     movlw   0x4              	MOVLW	0x04
000aa2   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
000aa4   f002
000aa6   0e05     movlw   0x5              	MOVLW	0x05
000aa8   cfdb     movff   0xfdb, 0x3       	MOVFF	PLUSW2, r0x03
000aaa   f003
                                           ;	.line	156; code.c	PORTB = 0;
000aac   6a81     clrf    0x81, 0          	CLRF	_PORTB
                                           ;	.line	158; code.c	PORTB = portb;
000aae   5000     movf    0, 0, 0          	MOVF	r0x00, W
000ab0   6e81     movwf   0x81, 0          	MOVWF	_PORTB
                                           ;	.line	159; code.c	delay(time_);
000ab2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000ab4   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000ab6   5002     movf    0x2, 0, 0        	MOVF	r0x02, W
000ab8   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
000aba   ecf5     call    0x9ea, 0         	CALL	_delay
000abc   f004
000abe   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
000ac0   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	160; code.c	PORTB = 0;
000ac2   6a81     clrf    0x81, 0          	CLRF	_PORTB
000ac4   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000ac6   f003
000ac8   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000aca   f002
000acc   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000ace   f001
000ad0   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000ad2   f000
000ad4   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000ad6   ffd9
000ad8   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__get_command	code
                                           _get_command:
                                           ;	.line	119; code.c	int get_command(char* command)
000568   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
00056a   ffe5
00056c   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
00056e   ffd9
000570   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000572   ffe5
000574   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
000576   ffe5
000578   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
00057a   ffe5
00057c   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
00057e   ffe5
000580   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000582   ffe5
000584   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000586   ffe5
000588   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
00058a   ffe5
00058c   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
00058e   ffe5
000590   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
000592   ffe5
000594   c009     movff   0x9, 0xfe5       	MOVFF	r0x09, POSTDEC1
000596   ffe5
000598   0e02     movlw   0x2              	MOVLW	0x02
00059a   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
00059c   f000
00059e   0e03     movlw   0x3              	MOVLW	0x03
0005a0   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
0005a2   f001
0005a4   0e04     movlw   0x4              	MOVLW	0x04
0005a6   cfdb     movff   0xfdb, 0x2       	MOVFF	PLUSW2, r0x02
0005a8   f002
                                           ;	.line	123; code.c	putchar('>');
0005aa   0e3e     movlw   0x3e             	MOVLW	0x3e
0005ac   6ee5     movwf   0xe5, 0          	MOVWF	POSTDEC1
0005ae   ec82     call    0xb04, 0         	CALL	_putchar
0005b0   f005
0005b2   52e6     movf    0xe6, 0x1, 0     	MOVF	POSTINC1, F
                                           ;	.line	125; code.c	for(i=0;i<8;i++)
0005b4   6a03     clrf    0x3, 0           	CLRF	r0x03
0005b6   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00173_DS_:
                                           ;	.line	127; code.c	com[i] = getchar();
0005b8   0e60     movlw   0x60             	MOVLW	LOW(_get_command_com_1_14)
0005ba   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
0005bc   6e05     movwf   0x5, 0           	MOVWF	r0x05
0005be   0e00     movlw   0                	MOVLW	HIGH(_get_command_com_1_14)
0005c0   2004     addwfc  0x4, 0, 0        	ADDWFC	r0x04, W
0005c2   6e06     movwf   0x6, 0           	MOVWF	r0x06
0005c4   ecb5     call    0xb6a, 0         	CALL	_getchar
0005c6   f005
0005c8   6e07     movwf   0x7, 0           	MOVWF	r0x07
0005ca   c005     movff   0x5, 0xfe9       	MOVFF	r0x05, FSR0L
0005cc   ffe9
0005ce   c006     movff   0x6, 0xfea       	MOVFF	r0x06, FSR0H
0005d0   ffea
0005d2   c007     movff   0x7, 0xfef       	MOVFF	r0x07, INDF0
0005d4   ffef
                                           ;	.line	125; code.c	for(i=0;i<8;i++)
0005d6   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0005d8   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0005da   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0005dc   0f80     addlw   0x80             	ADDLW	0x80
0005de   0f80     addlw   0x80             	ADDLW	0x80
0005e0   e102     bnz     0x5e6            	BNZ	_00229_DS_
0005e2   0e08     movlw   0x8              	MOVLW	0x08
0005e4   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00229_DS_:
0005e6   e3e8     bnc     0x5b8            	BNC	_00173_DS_
                                           ;	.line	133; code.c	if( (com[0]=='x' || com[0]=='y') && (com[1]==':') && (com[2]=='f' || com[2]=='b') && (com[3]==':')
0005e8   c060     movff   0x60, 0x3        	MOVFF	_get_command_com_1_14, r0x03
0005ea   f003
0005ec   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0005ee   0a78     xorlw   0x78             	XORLW	0x78
0005f0   e004     bz      0x5fa            	BZ	_00161_DS_
0005f2   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
0005f4   0a79     xorlw   0x79             	XORLW	0x79
0005f6   e001     bz      0x5fa            	BZ	_00161_DS_
0005f8   d06e     bra     0x6d6            	BRA	_00159_DS_
                                           _00161_DS_:
0005fa   0100     movlb   0                	BANKSEL	(_get_command_com_1_14 + 1)
0005fc   5161     movf    0x61, 0, 0x1     	MOVF	(_get_command_com_1_14 + 1), W, B
0005fe   0a3a     xorlw   0x3a             	XORLW	0x3a
000600   e001     bz      0x604            	BZ	_00235_DS_
000602   d069     bra     0x6d6            	BRA	_00159_DS_
                                           _00235_DS_:
000604   c062     movff   0x62, 0x3        	MOVFF	(_get_command_com_1_14 + 2), r0x03
000606   f003
000608   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00060a   0a66     xorlw   0x66             	XORLW	0x66
00060c   e004     bz      0x616            	BZ	_00164_DS_
00060e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000610   0a62     xorlw   0x62             	XORLW	0x62
000612   e001     bz      0x616            	BZ	_00164_DS_
000614   d060     bra     0x6d6            	BRA	_00159_DS_
                                           _00164_DS_:
000616   0100     movlb   0                	BANKSEL	(_get_command_com_1_14 + 3)
000618   5163     movf    0x63, 0, 0x1     	MOVF	(_get_command_com_1_14 + 3), W, B
00061a   0a3a     xorlw   0x3a             	XORLW	0x3a
00061c   e001     bz      0x620            	BZ	_00241_DS_
00061e   d05b     bra     0x6d6            	BRA	_00159_DS_
                                           _00241_DS_:
                                           ;	.line	135; code.c	&& (com[4]>0x2F && com[4]<0x3A) && (com[5]>0x2F && com[5]<0x3A) && (com[6]>0x2F && com[6]<0x3A) && (com[7]>0x2F && com[7]<0x3A) 
000620   c064     movff   0x64, 0x3        	MOVFF	(_get_command_com_1_14 + 4), r0x03
000622   f003
000624   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000626   0f80     addlw   0x80             	ADDLW	0x80
000628   0f50     addlw   0x50             	ADDLW	0x50
00062a   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00062c   d054     bra     0x6d6            	BRA	_00159_DS_
00062e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000630   0f80     addlw   0x80             	ADDLW	0x80
000632   0f46     addlw   0x46             	ADDLW	0x46
000634   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
000636   d04f     bra     0x6d6            	BRA	_00159_DS_
000638   c065     movff   0x65, 0x3        	MOVFF	(_get_command_com_1_14 + 5), r0x03
00063a   f003
00063c   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00063e   0f80     addlw   0x80             	ADDLW	0x80
000640   0f50     addlw   0x50             	ADDLW	0x50
000642   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
000644   d048     bra     0x6d6            	BRA	_00159_DS_
000646   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000648   0f80     addlw   0x80             	ADDLW	0x80
00064a   0f46     addlw   0x46             	ADDLW	0x46
00064c   b0d8     btfsc   0xd8, 0, 0       	BTFSC	STATUS, 0
00064e   d043     bra     0x6d6            	BRA	_00159_DS_
000650   c066     movff   0x66, 0x3        	MOVFF	(_get_command_com_1_14 + 6), r0x03
000652   f003
000654   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000656   0f80     addlw   0x80             	ADDLW	0x80
000658   0f50     addlw   0x50             	ADDLW	0x50
00065a   a0d8     btfss   0xd8, 0, 0       	BTFSS	STATUS, 0
00065c   d03c     bra     0x6d6            	BRA	_00159_DS_
00065e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000660   0f80     addlw   0x80             	ADDLW	0x80
000662   0f46     addlw   0x46             	ADDLW	0x46
000664   e238     bc      0x6d6            	BC	_00159_DS_
000666   c067     movff   0x67, 0x3        	MOVFF	(_get_command_com_1_14 + 7), r0x03
000668   f003
00066a   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
00066c   0f80     addlw   0x80             	ADDLW	0x80
00066e   0f50     addlw   0x50             	ADDLW	0x50
000670   e332     bnc     0x6d6            	BNC	_00159_DS_
000672   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000674   0f80     addlw   0x80             	ADDLW	0x80
000676   0f46     addlw   0x46             	ADDLW	0x46
000678   e22e     bc      0x6d6            	BC	_00159_DS_
                                           ;	.line	141; code.c	for(i=0;i<8;i++)
00067a   6a03     clrf    0x3, 0           	CLRF	r0x03
00067c   6a04     clrf    0x4, 0           	CLRF	r0x04
                                           _00175_DS_:
                                           ;	.line	143; code.c	command[i] = com[i];
00067e   5003     movf    0x3, 0, 0        	MOVF	r0x03, W
000680   2400     addwf   0, 0, 0          	ADDWF	r0x00, W
000682   6e05     movwf   0x5, 0           	MOVWF	r0x05
000684   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
000686   2001     addwfc  0x1, 0, 0        	ADDWFC	r0x01, W
000688   6e06     movwf   0x6, 0           	MOVWF	r0x06
00068a   6ae8     clrf    0xe8, 0          	CLRF	WREG
00068c   be04     btfsc   0x4, 0x7, 0      	BTFSC	r0x04, 7
00068e   68e8     setf    0xe8, 0          	SETF	WREG
000690   2002     addwfc  0x2, 0, 0        	ADDWFC	r0x02, W
000692   6e07     movwf   0x7, 0           	MOVWF	r0x07
000694   0e60     movlw   0x60             	MOVLW	LOW(_get_command_com_1_14)
000696   2403     addwf   0x3, 0, 0        	ADDWF	r0x03, W
000698   6e08     movwf   0x8, 0           	MOVWF	r0x08
00069a   0e00     movlw   0                	MOVLW	HIGH(_get_command_com_1_14)
00069c   2004     addwfc  0x4, 0, 0        	ADDWFC	r0x04, W
00069e   6e09     movwf   0x9, 0           	MOVWF	r0x09
0006a0   c008     movff   0x8, 0xfe9       	MOVFF	r0x08, FSR0L
0006a2   ffe9
0006a4   c009     movff   0x9, 0xfea       	MOVFF	r0x09, FSR0H
0006a6   ffea
0006a8   cfef     movff   0xfef, 0x8       	MOVFF	INDF0, r0x08
0006aa   f008
0006ac   c008     movff   0x8, 0xfe5       	MOVFF	r0x08, POSTDEC1
0006ae   ffe5
0006b0   c005     movff   0x5, 0xfe9       	MOVFF	r0x05, FSR0L
0006b2   ffe9
0006b4   c006     movff   0x6, 0xff3       	MOVFF	r0x06, PRODL
0006b6   fff3
0006b8   5007     movf    0x7, 0, 0        	MOVF	r0x07, W
0006ba   eccf     call    0xb9e, 0         	CALL	__gptrput1
0006bc   f005
                                           ;	.line	141; code.c	for(i=0;i<8;i++)
0006be   4a03     infsnz  0x3, 0x1, 0      	INFSNZ	r0x03, F
0006c0   2a04     incf    0x4, 0x1, 0      	INCF	r0x04, F
0006c2   5004     movf    0x4, 0, 0        	MOVF	r0x04, W
0006c4   0f80     addlw   0x80             	ADDLW	0x80
0006c6   0f80     addlw   0x80             	ADDLW	0x80
0006c8   e102     bnz     0x6ce            	BNZ	_00250_DS_
0006ca   0e08     movlw   0x8              	MOVLW	0x08
0006cc   5c03     subwf   0x3, 0, 0        	SUBWF	r0x03, W
                                           _00250_DS_:
0006ce   e3d7     bnc     0x67e            	BNC	_00175_DS_
                                           ;	.line	146; code.c	return 1;
0006d0   6af3     clrf    0xf3, 0          	CLRF	PRODL
0006d2   0e01     movlw   0x1              	MOVLW	0x01
0006d4   d002     bra     0x6da            	BRA	_00177_DS_
                                           _00159_DS_:
                                           ;	.line	149; code.c	return 0;
0006d6   6af3     clrf    0xf3, 0          	CLRF	PRODL
0006d8   6ae8     clrf    0xe8, 0          	CLRF	WREG
                                           _00177_DS_:
0006da   cfe4     movff   0xfe4, 0x9       	MOVFF	PREINC1, r0x09
0006dc   f009
0006de   cfe4     movff   0xfe4, 0x8       	MOVFF	PREINC1, r0x08
0006e0   f008
0006e2   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
0006e4   f007
0006e6   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
0006e8   f006
0006ea   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
0006ec   f005
0006ee   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
0006f0   f004
0006f2   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
0006f4   f003
0006f6   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
0006f8   f002
0006fa   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
0006fc   f001
0006fe   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000700   f000
000702   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000704   ffd9
000706   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__getchar	code
                                           _getchar:
                                           ;	.line	88; code.c	char getchar(void)
000b6a   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b6c   ffe5
000b6e   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b70   ffd9
                                           ;	.line	91; code.c	if (RCSTAbits.OERR)
000b72   a2ab     btfss   0xab, 0x1, 0     	BTFSS	_RCSTAbits, 1
000b74   d002     bra     0xb7a            	BRA	_00148_DS_
                                           ;	.line	94; code.c	RCSTAbits.CREN=0;
000b76   98ab     bcf     0xab, 0x4, 0     	BCF	_RCSTAbits, 4
                                           ;	.line	95; code.c	RCSTAbits.CREN=1;
000b78   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
                                           _00148_DS_:
                                           ;	.line	98; code.c	while( ! PIR1bits.RCIF );
000b7a   aa9e     btfss   0x9e, 0x5, 0     	BTFSS	_PIR1bits, 5
000b7c   d7fe     bra     0xb7a            	BRA	_00148_DS_
                                           ;	.line	100; code.c	return RCREG;
000b7e   50ae     movf    0xae, 0, 0       	MOVF	_RCREG, W
000b80   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b82   ffd9
000b84   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__putchar	code
                                           _putchar:
                                           ;	.line	79; code.c	void putchar(char c)
000b04   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000b06   ffe5
000b08   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000b0a   ffd9
000b0c   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
000b0e   ffe5
000b10   0e02     movlw   0x2              	MOVLW	0x02
000b12   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000b14   f000
                                           _00138_DS_:
                                           ;	.line	81; code.c	while( ! PIR1bits.TXIF );
000b16   a89e     btfss   0x9e, 0x4, 0     	BTFSS	_PIR1bits, 4
000b18   d7fe     bra     0xb16            	BRA	_00138_DS_
                                           ;	.line	83; code.c	TXREG = c;
000b1a   c000     movff   0, 0xfad         	MOVFF	r0x00, _TXREG
000b1c   ffad
000b1e   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000b20   f000
000b22   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b24   ffd9
000b26   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__uart_init	code
                                           _uart_init:
                                           ;	.line	34; code.c	void uart_init(void)
000ada   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
000adc   ffe5
000ade   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
000ae0   ffd9
                                           ;	.line	39; code.c	SPBRG = 25; // 4MHz => 9600 baud (BRGH = 1)
000ae2   0e19     movlw   0x19             	MOVLW	0x19
000ae4   6eaf     movwf   0xaf, 0          	MOVWF	_SPBRG
                                           ;	.line	42; code.c	TXSTAbits.BRGH = 1; // (1 = high speed)
000ae6   84ac     bsf     0xac, 0x2, 0     	BSF	_TXSTAbits, 2
                                           ;	.line	45; code.c	BAUDCONbits.BRG16 = 0;
000ae8   96b8     bcf     0xb8, 0x3, 0     	BCF	_BAUDCONbits, 3
                                           ;	.line	48; code.c	TXSTAbits.SYNC = 0; // (0 = asynchrone)
000aea   98ac     bcf     0xac, 0x4, 0     	BCF	_TXSTAbits, 4
                                           ;	.line	51; code.c	RCSTAbits.SPEN = 1; // 1 = l port serie valide
000aec   8eab     bsf     0xab, 0x7, 0     	BSF	_RCSTAbits, 7
                                           ;	.line	54; code.c	PIE1bits.TXIE = 0; // 1 = interruption transmission valide
000aee   989d     bcf     0x9d, 0x4, 0     	BCF	_PIE1bits, 4
                                           ;	.line	57; code.c	TXSTAbits.TX9 = 0; // 0 = 8-bit transmis)
000af0   9cac     bcf     0xac, 0x6, 0     	BCF	_TXSTAbits, 6
                                           ;	.line	60; code.c	TXSTAbits.TXEN = 1; // (1 = transmission valide
000af2   8aac     bsf     0xac, 0x5, 0     	BSF	_TXSTAbits, 5
                                           ;	.line	63; code.c	PIE1bits.RCIE = 0; // 1 = interruption reception valide
000af4   9a9d     bcf     0x9d, 0x5, 0     	BCF	_PIE1bits, 5
                                           ;	.line	66; code.c	RCSTAbits.RX9 = 0; // 0 = 8-bit reception)
000af6   9cab     bcf     0xab, 0x6, 0     	BCF	_RCSTAbits, 6
                                           ;	.line	69; code.c	TRISCbits.TRISC6 = 1; // 0 = broche en sortie)
000af8   8c94     bsf     0x94, 0x6, 0     	BSF	_TRISCbits, 6
                                           ;	.line	70; code.c	TRISCbits.TRISC7 = 1; // 1 = broche en entree)
000afa   8e94     bsf     0x94, 0x7, 0     	BSF	_TRISCbits, 7
                                           ;	.line	73; code.c	RCSTAbits.CREN = 1; // 1 = reception valide
000afc   88ab     bsf     0xab, 0x4, 0     	BSF	_RCSTAbits, 4
000afe   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000b00   ffd9
000b02   0012     return  0                	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_code__delay	code
                                           _delay:
                                           ;	.line	18; code.c	void delay(unsigned int delay)
0009ea   cfd9     movff   0xfd9, 0xfe5     	MOVFF	FSR2L, POSTDEC1
0009ec   ffe5
0009ee   cfe1     movff   0xfe1, 0xfd9     	MOVFF	FSR1L, FSR2L
0009f0   ffd9
0009f2   c000     movff   0, 0xfe5         	MOVFF	r0x00, POSTDEC1
0009f4   ffe5
0009f6   c001     movff   0x1, 0xfe5       	MOVFF	r0x01, POSTDEC1
0009f8   ffe5
0009fa   c002     movff   0x2, 0xfe5       	MOVFF	r0x02, POSTDEC1
0009fc   ffe5
0009fe   c003     movff   0x3, 0xfe5       	MOVFF	r0x03, POSTDEC1
000a00   ffe5
000a02   c004     movff   0x4, 0xfe5       	MOVFF	r0x04, POSTDEC1
000a04   ffe5
000a06   c005     movff   0x5, 0xfe5       	MOVFF	r0x05, POSTDEC1
000a08   ffe5
000a0a   c006     movff   0x6, 0xfe5       	MOVFF	r0x06, POSTDEC1
000a0c   ffe5
000a0e   c007     movff   0x7, 0xfe5       	MOVFF	r0x07, POSTDEC1
000a10   ffe5
000a12   0e02     movlw   0x2              	MOVLW	0x02
000a14   cfdb     movff   0xfdb, 0         	MOVFF	PLUSW2, r0x00
000a16   f000
000a18   0e03     movlw   0x3              	MOVLW	0x03
000a1a   cfdb     movff   0xfdb, 0x1       	MOVFF	PLUSW2, r0x01
000a1c   f001
                                           ;	.line	20; code.c	unsigned int a = 0;
000a1e   6a02     clrf    0x2, 0           	CLRF	r0x02
000a20   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	23; code.c	for(i=0;i<delay;i++)
000a22   6a04     clrf    0x4, 0           	CLRF	r0x04
000a24   6a05     clrf    0x5, 0           	CLRF	r0x05
                                           _00110_DS_:
000a26   5001     movf    0x1, 0, 0        	MOVF	r0x01, W
000a28   5c05     subwf   0x5, 0, 0        	SUBWF	r0x05, W
000a2a   e102     bnz     0xa30            	BNZ	_00127_DS_
000a2c   5000     movf    0, 0, 0          	MOVF	r0x00, W
000a2e   5c04     subwf   0x4, 0, 0        	SUBWF	r0x04, W
                                           _00127_DS_:
000a30   e212     bc      0xa56            	BC	_00112_DS_
                                           ;	.line	25; code.c	while(a < 10)
000a32   c002     movff   0x2, 0x6         	MOVFF	r0x02, r0x06
000a34   f006
000a36   c003     movff   0x3, 0x7         	MOVFF	r0x03, r0x07
000a38   f007
                                           _00105_DS_:
000a3a   0e00     movlw   0                	MOVLW	0x00
000a3c   5c07     subwf   0x7, 0, 0        	SUBWF	r0x07, W
000a3e   e102     bnz     0xa44            	BNZ	_00128_DS_
000a40   0e0a     movlw   0xa              	MOVLW	0x0a
000a42   5c06     subwf   0x6, 0, 0        	SUBWF	r0x06, W
                                           _00128_DS_:
000a44   e203     bc      0xa4c            	BC	_00107_DS_
                                           ;	.line	27; code.c	a = a+1;
000a46   4a06     infsnz  0x6, 0x1, 0      	INFSNZ	r0x06, F
000a48   2a07     incf    0x7, 0x1, 0      	INCF	r0x07, F
000a4a   d7f7     bra     0xa3a            	BRA	_00105_DS_
                                           _00107_DS_:
                                           ;	.line	29; code.c	a=0;
000a4c   6a02     clrf    0x2, 0           	CLRF	r0x02
000a4e   6a03     clrf    0x3, 0           	CLRF	r0x03
                                           ;	.line	23; code.c	for(i=0;i<delay;i++)
000a50   4a04     infsnz  0x4, 0x1, 0      	INFSNZ	r0x04, F
000a52   2a05     incf    0x5, 0x1, 0      	INCF	r0x05, F
000a54   d7e8     bra     0xa26            	BRA	_00110_DS_
                                           _00112_DS_:
000a56   cfe4     movff   0xfe4, 0x7       	MOVFF	PREINC1, r0x07
000a58   f007
000a5a   cfe4     movff   0xfe4, 0x6       	MOVFF	PREINC1, r0x06
000a5c   f006
000a5e   cfe4     movff   0xfe4, 0x5       	MOVFF	PREINC1, r0x05
000a60   f005
000a62   cfe4     movff   0xfe4, 0x4       	MOVFF	PREINC1, r0x04
000a64   f004
000a66   cfe4     movff   0xfe4, 0x3       	MOVFF	PREINC1, r0x03
000a68   f003
000a6a   cfe4     movff   0xfe4, 0x2       	MOVFF	PREINC1, r0x02
000a6c   f002
000a6e   cfe4     movff   0xfe4, 0x1       	MOVFF	PREINC1, r0x01
000a70   f001
000a72   cfe4     movff   0xfe4, 0         	MOVFF	PREINC1, r0x00
000a74   f000
000a76   cfe4     movff   0xfe4, 0xfd9     	MOVFF	PREINC1, FSR2L
000a78   ffd9
000a7a   0012     return  0                	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2722 (0x0aa2) bytes ( 2.08%)
                                           ;           	 1361 (0x0551) words
                                           ; udata size:	   28 (0x001c) bytes ( 1.56%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
